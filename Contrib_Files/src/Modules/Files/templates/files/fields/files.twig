<section id="{{ id }}" class="files-frop">
    <p class="info">{{ t('Drop files here or click to upload manually', 'files') }}</p>
    <div class="progress">
        <div class="meter progress_bar"></div>
    </div>
</section>

<ul class="large-block-grid-8 medium-block-grid-6" id="{{ filesId }}">
    {% for item in items %}
        <li>
            <img src="{{ item.getAttribute(fileField) }}" alt=""/>
        </li>
    {% else %}
        <li class="empty">
            {{ t('There are no files here', 'files') }}
        </li>
    {% endfor %}
</ul>


<script>
    (function ($) {
    
        "use strict";

        var filesField = function () {
            return filesField.init.apply(this, arguments);
        };

        $.extend(filesField, {
            options: {
                uploadUrl: undefined,
                listId: undefined,
                flowData: undefined
            },
            element: undefined,
            init: function (element, options) {
                if (element === undefined) return;
    
                this.element = element;
                this.options = $.extend(this.options, options);

                this.initUploader();
                return this;
            },
            initUploader: function () {
                var me = this;

                var flow = new Flow({
                    target: me.options.uploadUrl,
                    query: me.options.flowData
                });

                flow.assignBrowse(this.element);
                flow.assignDrop(this.element);

                flow.on('filesSubmitted', function(){
                    flow.upload();
                });
    
                flow.on('uploadStart', function(){
                    $(me.element).find('.progress_bar').css({
                        'width': 0
                    });
                });
    
                flow.on('progress', function(){
                    var width = flow.progress() * 100 + '%';
                    $(me.element).find('.progress_bar').css({
                        'width': width
                    });
                });
    
                flow.on('complete', function(){
                    $(me.element).find('.progress_bar').css({
                        'width': '100%'
                    });
                    me.updateList();
                });
            },
            updateList: function () {
                var me = this;
                $.ajax({
                    'url': window.location.href,
                    'dataType': 'html',
                    'success': function (data) {
                        var wrapped_data = $('<div/>').append(data);
                        $('#' + me.options.listId).replaceWith(wrapped_data.find('#' + me.options.listId));
                    }
                });
            }
        });
    
        /**
         * Инициализация функции объекта для jQuery
         */
        return $.fn.filesField = function (options) {
            return filesField.init(this, options);
        };
    
    })($);

</script>

<script type='text/javascript'>
    $(function(){
        $('#{{ id }}').filesField({{ data|raw }});
    });
</script>